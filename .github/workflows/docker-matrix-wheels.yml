name: Matrix-build-wheels

on:
  push:
    branches:
#      - main
      - 'releases/**'


jobs:
  prepare_build:
#    name: Get fhempy version
    runs-on: ubuntu-latest
    outputs:
      fhempyV: ${{steps.split_fhempyV.outputs.result}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Split fhempy Version
        id: split_fhempyV
        run: |
          echo "result=$(grep '^fhempy' requirements.txt | cut -d '=' -f3)" >> $GITHUB_OUTPUT      
 
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Build builder stage
        id: build_base_cross
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          file: Dockerfile.wheels
          platforms: linux/amd64,linux/arm/v5
          push: false
          target: base
          cache-to: type=gha,mode=max,scope=base_stage_cross

  prepare_matrix:
#    name:  Find fhempy modules 
    needs: prepare_build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{steps.getModules.outputs.matrix}}

    steps:
      - uses: actions/checkout@v3
        with:
          repository: 'fhempy/fhempy'
          ref: 'v${{ needs.prepare_build.outputs.fhempyV }}'

      - name: Get module name and prepare matrix
        id: getModules
        working-directory: FHEM/bindings/python/fhempy/lib
        run: |
          MODS=($(find ./ -type f -name manifest.json -exec sh -c 'dirname {}' \;  | sed 's|^./||'))
          #printf '%s\n' "${MODS[@]}"
          
          JSON='{ "include":[] }'
          for i in "${MODS[@]}"
          do
              REQS=$(jq -cr 'select(.requirements != []).requirements' ./$i/manifest.json)
              if [ -z $REQS ]; then 
                continue 
              fi
              JSON=$(echo $JSON | jq -c --argjson REQUIREMENTS $REQS --arg M "$i" '.include += [{"module": $M, "requirements": $REQUIREMENTS}]')
          done
          #echo $JSON
          echo "matrix=$JSON" >> $GITHUB_OUTPUT

  buildwWeels:
    runs-on: ubuntu-latest
    needs: [prepare_build, prepare_matrix]
    strategy:
      max-parallel: 2
      matrix:
        ${{fromJson(needs.prepare_matrix.outputs.matrix)}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: check variables
        run: |
          echo '${{ toJSON(matrix) }}'

      - name: overwrite requirement for mod
        run: |
          echo '${{toJSON(matrix.requirements)}}'  | jq --raw-output -e '.[]' > ./requirements.txt
          cat ./requirements.txt

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Build and push Docker image with Buildx (don't push if it is not a release)
      # https://github.com/docker/build-push-action
      - name: Build wheels 
        id: build_base_cross
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          file: Dockerfile.wheels
          platforms: linux/amd64,linux/arm/v5
          push: false
          target: export-stage
          outputs: type=local,dest=./wheelhouse
          cache-from: |
            type=gha,scope=base_stage_cross

      #- name: list files in wheelhouse
      #  run: |
      #    du -a ./wheelhouse

      - name: upload wheels as artifact for module ${{matrix.module}}
        uses: actions/upload-artifact@v3
        with: 
          name: ${{matrix.module}}-armv5
          path: |
            ./wheelhouse/linux_arm_v5/wheels
            -/wheelhouse/linux_arm_v5/requirements.txt

      - name: upload wheels as artifact for module ${{matrix.module}}
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.module}}-amd64
          path: |
            ./wheelhouse/linux_amd64/wheels
            -/wheelhouse/linux_amd64/requirements.txt
